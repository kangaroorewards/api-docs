
# Access Kangaroo Rewards REST API

The Kangaroo Rewards API allows you to manage resources in a simple, programmatic way using conventional
HTTP requests. The endpoints are intuitive and powerful, allowing you to easily make calls to retrieve
information.

All of the functionality that you are familiar with in the Kangaroo Rewards App is also available
through the API, allowing you to script the complex actions that your situation requires.

>**Note:** The X-Application-Key header is required for all requests

> **NOTE:** All POST, PUT and PATCH requests MUST have the content type header set to `application/json`

```
PUT /users/me/settings/notifications HTTP/1.1
Host: api.kangaroorewards.com
Accept: application/vnd.kangaroorewards.api.v1+json;
X-Application-Key: eyJ0eXAi...
Authorization: Bearer eyJ0eXAiOiJKV1QiL...
Content-Type: application/json; charset=UTF-8
```

## Requests

<table class="table">
    <tr class="bg-primary">
        <th>Method</th> <th>Usage</th>
    </tr>
    <tr>
        <td><strong>GET</strong></td>
        <td>
            For simple retrieval of information about your account, offers, customers etc., you should use the GET method. The information you request will be returned to you as a JSON object.
            The attributes defined by the JSON object can be used to form additional requests. Any request using the GET method is read-only and will not affect any of the objects you are querying.
        </td>
    </tr>
    <tr>
        <td><strong>POST</strong></td>
        <td>
            To create a new object, your request should specify the POST method.
            The POST request includes all of the attributes necessary to create a new object. When you wish to create a new object, send a POST request to the target endpoint.
        </td>
    </tr>
    <tr>
        <td><strong>PUT</strong></td>
        <td>To update the information about a resource in your account, the PUT method is available.</td>
    </tr>
    <tr>
        <td><strong>DELETE</strong></td>
        <td>To destroy a resource and remove it from your account, the DELETE method should be used. This will remove the specified object if it is found. If it is not found, the operation will return a response indicating that the object was not found (404 error code).</td>
    </tr>
</table>

## HTTP Statuses

Along with the HTTP methods that the API responds to, it will also return standard HTTP statuses, including
error codes.

In the event of a problem, the status will contain the error code, while the body of the response will
usually contain additional information about the problem that was encountered.

In general, if the status returned is in the `200` range, it indicates that the request was fulfilled
successfully and that no error was encountered.

Return codes in the `400` range typically indicate that there was an issue with the request that was sent.
Among other things, this could mean that you did not authenticate correctly, that you are requesting an action that you do not have authorization for, that the object you are requesting does not exist, or that your request is malformed.

If you receive a status in the `500` range, this generally indicates a server-side problem. This means that
we are having an issue on our end and cannot fulfill your request currently.

## Responses

When a request is successful, a response body will typically be sent back in the form of a JSON object. An exception to this is when a DELETE request is processed, which will result in a successful HTTP 204 status and an empty response body.

**Example Response**
```
{
    "data": {
        "name": "john"
        . . .
    }
}
```

## Meta
In addition to the main resource root, the response MAY also contain a **meta** object. This object contains information about the response itself.
The **meta** object MIGHT contain a **total** key that is set to the total number of objects returned by the request. This has implications on the pagination.
The **meta** object MIGHT not be presend or it will only be displayed when it has a value. Currently, the meta object will have a value when a request is made on a collection (like customers).

## Pagination
The **cursor** object is returned as part of the response body when pagination is enabled. By default, 100 objects are returned per page.
You can request a different page by appending ?page= to the request. For instance, to navigate to page 2, you could add ?page=2 to the end of your query

Example:
```
{
    "data": {
        . . .
    },
    "cursor": {
        "count": 100,
        "next": 2,
        "next_uri": "/customers?page=2"
    },
    "meta": {
        "total": 509
    }
}
```

## Rate Limit

The number of requests that can be made through the API is currently limited to 60 per minute per OAuth token.
The rate limiting information is contained within the response headers of each request. The relevant headers are:

- **X-RateLimit-Limit** - The number of requests that can be made per minute.
- **X-RateLimit-Remaining** - The number of requests that remain before you hit your request limit.
- **X-RateLimit-Reset** - This represents the time when you are allowed to make requests again. The value
- is given in [Unix epoch time](http://en.wikipedia.org/wiki/Unix_time "Unix epoch time") You'll only get **X-RateLimit-Reset** if you've hit the limit

Example
```
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 1476571703
```


